/*****************************************************************************
* Copyright(c) O2Micro, 2013. All rights reserved.
*	
* O2Micro OZ8806 battery gauge driver
* File: parameter.c

* Author: Eason.yuan
* $Source: /data/code/CVS
* $Revision: 4.00.01 $
*
* This program is free software and can be edistributed and/or modify
* it under the terms of the GNU General Public License version 2 as
* published by the Free Software Foundation.
*	
* This Source Code Reference Design for O2MICRO OZ8806 access (\u201cReference Design\u201d) 
* is sole for the use of PRODUCT INTEGRATION REFERENCE ONLY, and contains confidential 
* and privileged information of O2Micro International Limited. O2Micro shall have no 
* liability to any PARTY FOR THE RELIABILITY, SERVICEABILITY FOR THE RESULT OF PRODUCT 
* INTEGRATION, or results from: (i) any modification or attempted modification of the 
* Reference Design by any party, or (ii) the combination, operation or use of the 
* Reference Design with non-O2Micro Reference Design.
*****************************************************************************/

#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/i2c.h>
#include "parameter.h"

/*****************************************************************************
* Define section
* add all #define here
*****************************************************************************/
//#define OCV_DATA_NUM  11


/****************************************************************************
* extern variable declaration section
****************************************************************************/
extern int32_t res_divider_ratio;
extern uint8_t oz8806_cell_num;

/*****************************************************************************
* Global variables section - Exported
* add declaration of global variables that will be exported here
* e.g.
*	int8_t foo;
****************************************************************************/

one_latitude_data_t ocv_data[OCV_DATA_NUM] = {
	{3400, 00},{3500, 0}, {3668, 5}, {3700, 12},{3716, 15},{3732, 17},{3748, 19},
	{3764, 22},{3780, 27},{3796, 35},{3812, 40},{3828, 44},{3844, 47},{3860, 50},
	{3876, 53},{3892, 55},{3908, 56},{3924, 58},{3940, 60},{3956, 62},{3972, 64},
	{3988, 66},{4004, 68},{4020, 69},{4036, 71},{4052, 72},{4068, 74},{4084, 76},
	{4100, 77},{4116, 79},{4132, 80},{4148, 82},{4164, 83},{4180, 85},{4196, 86},
	{4212, 88},{4235, 90},{4240, 92},{4250, 93},{4260, 95},{4270, 96},{4280, 98},
	{4290, 99},{4300, 100},
};

// changle
one_latitude_data_t	charge_data[CHARGE_DATA_NUM] = {                                                                                                               
	{100, 10000},{158, 9989},{163, 9988},{169, 9987},{172, 9986},{178, 9965},{183,9943},
	{189, 9921},{198, 9882},{201, 9873},{207, 9847},{213, 9825},{219, 9803},{225, 9777},
	{233, 9747},{239, 9725},{247, 9694},{254, 9668},{262, 9638},{269, 9612},{278, 9577},
	{295, 9507},{313, 9429},{333, 9410},{353,9409},{375, 9400},{399, 9380},{424, 9350},
	{450, 9259},{479, 9163},{509, 9063},{539, 8967},{556, 8910},{574, 8854},{590, 8801},
	{626, 8684},{665, 8557},{706, 8409},{749, 8350},{770, 8300},{794, 8280},{816, 8250},
	{840, 8248},{864, 8174},{889, 8091},{914, 8013},{938, 7943},{965, 7856},{991, 7747},
	{1018, 7686},{1044, 7599},
};


one_latitude_data_t			cell_temp_data[TEMPERATURE_DATA_NUM] = {                                                                                                               
			{681,   115}, {766,   113}, {865,   105},
			{980,   100}, {1113,   95}, {1266,   90},
			{1451,   85}, {1668,   80}, {1924,   75},
			{2228,   70}, {2588,   65}, {3020,   60},
			{3536,   55}, {4160,   50}, {4911,   45},
			{5827,   40}, {6940,   35}, {8313,   30},
			{10000,  25}, {12090,  20}, {14690,  15},
			{17960,  10}, {22050,   5},	{27280,   0},
			{33900,  -5}, {42470, -10}, {53410, -15},
			{67770, -20},
};


config_data_t config_data = {20,232000,3300,5,781,250,3050,4350,160,3500,0,1};
//config_data_t config_data = {20,232000,3300,5,781,250,6850,4200,100,3500,0,1};

//
//config_data_t config_data = {22,232000,3300,5,781,250,6858,2100,100,1750,0,1};

/*
	int32_t		fRsense;		//= 20;			//Rsense value of chip, in mini ohm
	int32_t     temp_pull_up;  //230000;
	int32_t     temp_ref_voltage; //1800;1.8v
	int32_t		dbCARLSB;		//= 5.0;		//LSB of CAR, comes from spec
	int32_t		dbCurrLSB;		//781 (3.90625*100);	//LSB of Current, comes from spec
	int32_t		fVoltLSB;		//250 (2.5*100);	//LSB of Voltage, comes from spec

	int32_t		design_capacity;	//= 7000;		//design capacity of the battery
 	int32_t		charge_cv_voltage;	//= 4200;		//CV Voltage at fully charged
	int32_t		charge_end_current;	//= 100;		//the current threshold of End of Charged
	int32_t		discharge_end_voltage;	//= 3550;		//mV
	int32_t     board_offset;			//0; 				//mA, not more than caculate data
	uint8_t     debug;                                          // enable or disable O2MICRO debug information
}
*/



//  
int	XAxisElement[XAxis] = {3300,3320,3370,3395,3440,3465,3490,3510,3530,3555,3580,3605,
							3615,3645,3670,3700,3735,3775,3830,3920,3960,4035,4130,4205,4300};	
 

//int	YAxisElement[YAxis] = { 150,300,800,1000,1500,1600};	//real current mA.
//int	YAxisElement[YAxis] = { 167,334,835,1336,1670,2004};	//real current mA for huawei.
int	YAxisElement[YAxis] = { 214,397,610,793,1007,1312,1586};

                  
// RC table Z Axis value, in 10*'C format
int	ZAxisElement[ZAxis] = { -75,-25,50,150,250,350,450,550};

// contents of RC table, its unit is 10000C, 1C = DesignCapacity
int	RCtable[YAxis*ZAxis][XAxis]={
//temp = -7.5 ^C

{1700,1800,1900,2000,2104,2116,2122,2555,2819,3155,4000,4200,4300,4500,4600,4854,5343,6622,6989,7135,7240,8071,8763,9624,10000},
{3000,3100,3200,3423,3626,3955,4476,5953,7671,7800,7900,8000,8100,8200,8300,8400,8500,8600,8700,8800,8886,8951,9545,10000,10000},
{4995,5244,5653,6197,7185,8554,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000},
{8264,8646,9498,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000},
{10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000},
{10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000},
{10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000},

//temp = -2.5 ^C

{1198,1202,1206,1208,1239,1283,1319,1610,1801,2020,2678,3100,3300,3400,3500,3626,4092,5356,5839,6367,6746,7735,8558,9470,10000},
{1792,1838,1902,1978,2142,2380,2725,3658,4740,5540,6100,6400,6619,6587,6842,7400,7500,7600,7650,7716,7969,8452,9194,9964,10000},
{2763,2935,3228,3581,4214,5085,6194,7500,7700,7900,8000,8100,8200,8300,8400,8500,8600,8700,8774,8656,8741,9047,9573,10000,10000},
{4579,4850,5433,6101,7202,7800,8000,8100,8200,8300,8400,8500,8600,8700,8800,8900,9000,9100,9200,9300,9426,9720,10000,10000,10000},
{7139,7665,8708,9523,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000},
{10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000},
{10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000},

//temp = 5 ^C

{497,517,552,580,621,674,719,887,1009,1400,1500,1821,2107,2509,2586,2700,3100,3700,4600,5800,6500,7500,8341,9301,9958},
{779,900,1100,1300,1400,1800,2000,2600,3000,3300,3500,3872,4100,4300,4500,4817,5300,5939,6132,6552,7200,8200,8820,9686,10000},
{1500,1800,2000,2300,2700,3200,3550,4200,4600,4800,5000,5300,5500,5600,5700,6000,6300,6790,6887,7269,7900,8400,9163,9939,10000},
{2400,2600,3000,3400,3800,4300,4650,5200,5500,5600,5700,6100,6300,6400,6500,6700,6900,7466,7571,7893,8400,8916,9615,10000,10000},
{3070,3400,3900,4500,4900,5500,5700,6100,6400,6700,7000,7100,7200,7300,7400,7600,7800,8166,8267,8471,8729,9402,10000,10000,10000},
{4700,4900,5400,5700,6100,6400,6700,7200,7400,7500,7700,7900,8000,8100,8300,8400,8700,9199,9300,9400,9500,10000,10000,10000,10000},
{5900,6100,6600,6800,7200,7500,7900,8300,8500,8700,9000,9200,9400,9500,9600,9700,9800,10000,10000,10000,10000,10000,10000,10000,10000},

//temp = 15 ^C

{206,227,262,287,329,377,419,513,589,644,776,975,1198,1572,1764,1969,2367,3549,4163,5191,5948,7144,8166,9154,9830},
{340,369,420,461,532,614,710,929,1172,1351,1618,2000,2318,2433,2602,3144,3777,4619,5031,5767,6472,7561,8514,9443,10000},
{508,554,637,719,860,1048,1280,1660,2141,2427,2750,3081,3449,3643,3877,4308,4763,5327,5641,6312,6942,7948,8821,9684,10000},
{737,806,948,1090,1326,1640,1972,2574,3116,3340,3654,4015,4359,4501,4645,4996,5325,5892,6150,6747,7315,8279,9122,10000,10000},
{1092,1214,1458,1655,1977,2397,2894,3493,3970,4224,4557,4809,5122,5249,5378,5698,5987,6418,6683,7175,7699,8631,9449,10000,10000},
{1953,2161,2578,2917,3462,3976,4433,5007,5416,5581,5761,5908,6113,6214,6318,6549,6767,7153,7371,7794,8252,9058,9850,10000,10000},
{2997,3303,3867,4262,4700,5200,5641,6068,6371,6502,6675,6872,7040,7108,7178,7346,7501,7817,8008,8360,8746,9508,10000,10000,10000},

//temp = 25 ^C

{133,151,183,205,243,286,324,389,446,476,535,666,859,1219,1449,1726,2105,3258,3884,4979,5792,7012,8066,9065,9750},
{222,245,286,318,370,426,486,606,733,820,973,1300,1711,1836,1983,2474,3113,4058,4552,5410,6173,7357,8339,9293,9910},
{309,336,384,427,498,589,697,892,1133,1324,1699,2066,2405,2585,2806,3357,3954,4695,5092,5866,6569,7689,8621,9524,10000},
{378,413,484,548,655,799,960,1304,1681,1965,2331,2660,3021,3239,3458,4001,4495,5194,5508,6202,6866,7931,8830,9798,10000},
{485,543,658,752,910,1133,1407,1833,2404,2651,2995,3329,3789,3985,4181,4633,5038,5616,5942,6546,7170,8203,9083,9922,10000},
{779,867,1053,1209,1469,1769,2144,2849,3349,3628,4020,4372,4711,4867,5023,5381,5716,6204,6473,7013,7617,8572,9433,10000,10000},
{1192,1315,1557,1773,2089,2557,3061,3715,4243,4499,4824,5147,5434,5559,5684,5984,6262,6699,6960,7470,8002,8927,9752,10000,10000},

//temp = 35 ^C

{114,131,161,182,218,257,293,348,397,417,449,553,732,1085,1329,1631,1999,3137,3766,4884,5717,6944,8011,9012,9699},
{191,212,248,276,320,366,412,496,579,631,737,1038,1478,1606,1742,2205,2840,3819,4344,5249,6030,7250,8238,9201,9823},
{253,273,308,337,382,437,498,620,768,918,1303,1676,1995,2165,2377,2968,3615,4421,4850,5659,6385,7549,8504,9425,9996},
{272,295,339,374,431,509,601,837,1141,1440,1816,2121,2479,2724,2969,3582,4138,4884,5217,5944,6640,7741,8657,9636,10000},
{299,333,397,449,540,681,861,1204,1796,2034,2369,2724,3232,3453,3673,4170,4617,5248,5596,6241,6900,7965,8864,9722,10000},
{397,438,530,612,752,953,1278,2009,2529,2846,3309,3732,4116,4290,4464,4865,5243,5763,6048,6628,7286,8299,9181,10000,10000},
{578,627,734,869,1114,1545,2054,2771,3373,3669,4043,4406,4732,4877,5022,5368,5691,6170,6455,7023,7608,8595,9448,10000,10000},

//temp = 45 ^C

{110,126,155,176,210,249,284,334,380,397,418,512,685,1034,1284,1594,1957,3086,3715,4841,5682,6908,7979,8979,9667},
{183,202,237,263,305,347,388,459,525,563,651,940,1390,1517,1647,2097,2728,3717,4254,5176,5961,7193,8181,9145,9767},
{237,255,285,309,345,386,430,523,635,768,1154,1526,1834,1999,2206,2809,3473,4302,4743,5562,6295,7474,8436,9362,9936},
{241,260,293,318,356,409,474,666,938,1240,1615,1907,2259,2513,2767,3405,3984,4747,5086,5821,6526,7637,8555,9534,10000},
{242,267,312,348,412,519,661,965,1561,1793,2118,2476,3000,3228,3456,3969,4430,5080,5435,6093,6761,7832,8733,9594,10000},
{273,296,352,403,494,651,950,1683,2203,2532,3019,3466,3864,4043,4223,4638,5029,5558,5848,6438,7114,8145,9028,9931,10000},
{370,389,441,540,750,1158,1660,2392,3018,3325,3714,4088,4426,4577,4728,5089,5428,5919,6213,6798,7400,8405,9261,10000,10000},

//temp = 55 ^C

{108,125,154,174,208,246,280,329,374,390,407,497,667,1015,1266,1579,1940,3065,3694,4822,5665,6890,7961,8959,9647},
{180,200,233,259,300,341,380,446,507,539,619,903,1356,1482,1610,2054,2682,3674,4215,5142,5928,7163,8148,9110,9731},
{233,249,278,300,333,369,407,489,587,713,1098,1468,1771,1933,2137,2744,3414,4251,4695,5517,6250,7434,8396,9324,9897},
{232,249,279,300,331,374,428,603,861,1163,1537,1822,2170,2427,2683,3331,3918,4686,5027,5762,6469,7581,8495,9469,10000},
{224,246,284,314,368,461,588,875,1469,1698,2017,2375,2903,3134,3364,3882,4347,5002,5359,6021,6690,7759,8654,9512,10000},
{232,249,291,330,401,540,827,1556,2074,2407,2901,3355,3757,3938,4119,4537,4933,5463,5753,6344,7025,8058,8936,9834,10000},
{299,307,337,421,615,1010,1506,2241,2873,3183,3575,3952,4293,4445,4597,4963,5307,5800,6096,6685,7289,8296,9147,9996,10000},

};			


parameter_data_t parameter_customer;

/*****************************************************************************
 * Description:
 *		bmu_init_chip
 * Parameters:
 *		description for each argument, new argument starts at new line
 * Return:
 *		what does this function returned?
 *****************************************************************************/
void bmu_init_parameter(struct i2c_client *client)
{
	parameter_customer.config = &config_data;
	parameter_customer.ocv = &ocv_data;
	parameter_customer.temperature = &cell_temp_data;
	parameter_customer.client = client;
	parameter_customer.ocv_data_num = OCV_DATA_NUM;
	parameter_customer.cell_temp_num = TEMPERATURE_DATA_NUM;
	parameter_customer.charge_pursue_step = 10;		
 	parameter_customer.discharge_pursue_step = 6;		
	parameter_customer.discharge_pursue_th = 10;
	parameter_customer.wait_method = 2;


	//oz8806_cell_num = 2;
	//res_divider_ratio = 353 ;  // note: multiplied by 1000 

	//r1 = 220k,r2 = 120k,so 120 * 1000 / 120 + 220 = 353
	//r2's voltage is the voltage which oz8806 sample.
	
	//For example :
	//Read oz8806 voltage is vin
	//then the whole voltage is  vin * 1000 / res_divider_ratio;
}


/*****************************************************************************
 * Description:
 *		bmu_init_gg
 * Parameters:
 *		description for each argument, new argument starts at new line
 * Return:
 *		what does this function returned?
 *****************************************************************************/
void bmu_init_gg(void)
{
	gas_gauge->charge_table_num = CHARGE_DATA_NUM;
	gas_gauge->rc_x_num = XAxis;
	gas_gauge->rc_y_num = YAxis;
	gas_gauge->rc_z_num = ZAxis;

	gas_gauge->discharge_current_th = DISCH_CURRENT_TH;
	gas_gauge->ri = 16;
}










